@{
    ViewData["Title"] = "Báo cáo thời gian làm việc";
}

<div class="container-fluid p-0">
    <div class="card shadow ">
        <div class="card-header bg-primary text-white py-3" style="background-color: white !important; border-radius: 15px;">
            <h4 class="mb-0 text-center fw-bold" style="color: #0d6efd;!important">THỜI GIAN CHỜ KHÁM CHUNG VÀ THỜI GIAN KHÁM BỆNH TRUNG BÌNH</h4>
        </div>
        <div class="card-body" style="background: linear-gradient(145deg, #f3f4f6, #ffffff);">
            <div class="table-responsive">
                <div class="row rounded p-4 mb-4 mx-1" style="background: linear-gradient(145deg, #ffffff, #f3f4f6); box-shadow: 20px 20px 60px #d1d1d1, -20px -20px 60px #ffffff; border-radius: 15px;">
                    <div class="col-md-3 text-center">
                        <div class="logo-container" style="transform: perspective(1000px) rotateY(10deg);">
                            <img src="~/Images/avtlogo.png" alt="Logo" class="img-fluid" style="max-width: 250px; filter: drop-shadow(3px 3px 5px rgba(0,0,0,0.2));">
                        </div>
                    </div>
                    
                    <div class="col-md-3 text-center">
                        <div class="info-card" style="padding: 15px; background: white; border-radius: 10px; box-shadow: 0 10px 20px rgba(0,0,0,0.1); transform: translateZ(20px);">
                            <span class="text-muted d-block mb-2" style="color: #f50808!important; font-weight: bold; font-size: 20px;">Ngày tháng năm</span>
                            <h5 class="fw-bold" style="color: #2b6cb0; font-size: 20px;">@DateTime.Now.ToString("dd/MM/yyyy")</h5>
                        </div>
                    </div>

                    <div class="col-md-3 text-center">
                        <div class="info-card" style="padding: 15px; background: white; border-radius: 10px; box-shadow: 0 10px 20px rgba(0,0,0,0.1); transform: translateZ(20px);">
                            <span class="text-muted d-block mb-2" style="color: #f50808!important; font-weight: bold; font-size: 20px;">Thời điểm làm mới (30 phút)</span>
                            <h5 class="fw-bold" style="color: #2b6cb0; font-size: 20px;" id="currentTime">@DateTime.Now.ToString("HH:mm:ss")</h5>
                        </div>
                    </div>

                    <div class="col-md-3 text-center">
                        <div class="info-card" style="padding: 15px; background: white; border-radius: 10px; box-shadow: 0 10px 20px rgba(0,0,0,0.1); transform: translateZ(20px);">
                            <span class="text-muted d-block mb-2" style="color: #f50808!important; font-weight: bold; font-size: 20px;">Thời gian trung bình chờ</span>
                            <h5 class="fw-bold" style="color: #2b6cb0; font-size: 20px;" id="averageWaitTime">0 phút</h5>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <button id="exportExcel" class="btn btn-success me-2">
                        <i class="fas fa-file-excel me-2"></i>Xuất Excel
                    </button>
                    <div class="btn btn-primary btn-file">
                        <i class="fas fa-file-import me-2"></i>Nhập Excel
                        <input type="file" id="importExcel" accept=".xlsx, .xls">
                    </div>
                </div>

                <div class="table-container" style="background: white; border-radius: 15px; box-shadow: 0 15px 30px rgba(0,0,0,0.1); padding: 20px;">
                    <table class="table table-hover" id="patientTable">
                        <thead>
                            <tr class="text-center" style="background: linear-gradient(145deg, #f3f4f6, #0095d9);">
                                <th scope="col" style="width: 5%; padding: 15px; color:#0d6efd !important;">STT</th>
                                <th scope="col" style="width: 15%; padding: 15px; color:#0d6efd !important; ">MÃ BỆNH NHÂN</th>
                                <th scope="col" style="width: 20%; padding: 15px; color:#0d6efd !important; ">TÊN BỆNH NHÂN</th>
                                <th scope="col" style="width: 20%; padding: 15px; color:#0d6efd !important;">THỜI GIAN ĐĂNG KÝ</th>
                                <th scope="col" style="width: 20%; padding: 15px; color:#0d6efd !important;">THỜI GIAN HOÀN TẤT (PHÚT) DỰ KIẾN</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="text-center" style="transition: all 0.3s ease;">
                                <td class="fw-bold" style="padding: 15px;">1</td>
                                <td style="padding: 15px;">BN220073967</td>
                                <td style="padding: 15px;">TRỊNH THỊ THỦY</td>
                                <td style="padding: 15px;">03/01/2025 06:07</td>
                         
                                <td style="padding: 15px;">118</td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="text-center mt-3" style="display: none;">
                        <button id="prevPage" class="btn btn-secondary me-2" >Trang trước</button>
                        <span id="pageInfo">Trang 1</span>
                        <button id="nextPage" class="btn btn-secondary ms-2" >Trang sau</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .table-container {
        transform: perspective(1000px) rotateX(2deg);
        transform-style: preserve-3d;
    }
    
    .info-card {
        transition: transform 0.3s ease;
    }
    
    .info-card:hover {
        transform: translateZ(30px) scale(1.05);
    }
    
    tr:hover {
        background: linear-gradient(145deg, #f3f4f6, #ffffff) !important;
        transform: translateZ(20px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .logo-container {
        transition: transform 0.3s ease;
    }
    
    .logo-container:hover {
        transform: perspective(1000px) rotateY(-10deg);
    }

    .btn-file {
        position: relative;
        overflow: hidden;
    }

    .btn-file input[type=file] {
        position: absolute;
        top: 0;
        right: 0;
        min-width: 100%;
        min-height: 100%;
        font-size: 100px;
        text-align: right;
        filter: alpha(opacity=0);
        opacity: 0;
        outline: none;
        background: white;
        cursor: pointer;
        display: block;
    }
</style>

<script>
    let allPatientData = [];
    let currentPage = 1;
    const itemsPerPage = 10;

    function calculateAverageWaitTime() {
        if (allPatientData.length === 0) return 0;
        
        const totalWaitTime = allPatientData.reduce((sum, row) => {
            const waitTime = parseInt(row['Thời gian hoàn tất khám (phút)']) || 0;
            return sum + waitTime;
        }, 0);
        
        return Math.round(totalWaitTime / allPatientData.length);
    }

    function updateTable(page) {
        const tbody = document.querySelector('#patientTable tbody');
        tbody.innerHTML = '';
        
        const start = (page - 1) * itemsPerPage;
        const end = start + itemsPerPage;
        const pageData = allPatientData.slice(start, end);
        
        pageData.forEach((row, index) => {
            let tr = document.createElement('tr');
            tr.className = 'text-center';
            tr.style.transition = 'all 0.3s ease';
            
            tr.innerHTML = `
                <td class="fw-bold" style="padding: 15px;">${start + index + 1}</td>
                <td style="padding: 15px;">${row['Mã bệnh nhân'] || ''}</td>
                <td style="padding: 15px;">${row['Tên bệnh nhân'] || ''}</td>
                <td style="padding: 15px;">${row['Thời gian đăng ký bệnh'] || ''}</td>

                <td style="padding: 15px;">${row['Thời gian hoàn tất khám (phút)'] || ''}</td>
            `;
            
            tbody.appendChild(tr);
        });

        // Update average wait time
        const avgWaitTime = calculateAverageWaitTime();
        document.getElementById('averageWaitTime').textContent = `${avgWaitTime} phút`;

        document.getElementById('pageInfo').textContent = `Trang ${page}`;
        document.getElementById('prevPage').disabled = page === 1;
        document.getElementById('nextPage').disabled = end >= allPatientData.length;
    }

    function autoChangePage() {
        if (currentPage * itemsPerPage < allPatientData.length) {
            currentPage++;
        } else {
            currentPage = 1;
        }
        updateTable(currentPage);
    }

    document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            updateTable(currentPage);
        }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
        if (currentPage * itemsPerPage < allPatientData.length) {
            currentPage++;
            updateTable(currentPage);
        }
    });

    document.getElementById('exportExcel').addEventListener('click', function() {
        let table = document.getElementById('patientTable');
        let wb = XLSX.utils.table_to_book(table, {sheet: "Danh sách bệnh nhân"});
        XLSX.writeFile(wb, 'DanhSachBenhNhan.xlsx');
    });

    document.getElementById('importExcel').addEventListener('change', function(e) {
        let file = e.target.files[0];
        let reader = new FileReader();
        
        reader.onload = function(e) {
            try {
                let data = new Uint8Array(e.target.result);
                let workbook = XLSX.read(data, {type: 'array'});
                
                // Lấy sheet đầu tiên
                let firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                
                // Chuyển đổi dữ liệu từ sheet sang JSON
                allPatientData = XLSX.utils.sheet_to_json(firstSheet);
                
                // Kiểm tra xem có dữ liệu không
                if (allPatientData && allPatientData.length > 0) {
                    console.log('Dữ liệu đã được import:', allPatientData);
                    currentPage = 1;
                    updateTable(currentPage);
                } else {
                    console.error('Không có dữ liệu trong file Excel');
                    alert('File Excel không có dữ liệu hoặc định dạng không đúng. Vui lòng kiểm tra lại.');
                }
            } catch (error) {
                console.error('Lỗi khi đọc file Excel:', error);
                alert('Có lỗi xảy ra khi đọc file Excel. Vui lòng kiểm tra lại định dạng file.');
            }
        };
        
        reader.onerror = function(error) {
            console.error('Lỗi khi đọc file:', error);
            alert('Có lỗi xảy ra khi đọc file. Vui lòng thử lại.');
        };
        
        if (file) {
            reader.readAsArrayBuffer(file);
        }
    });

    // Auto change page every 30 minutes (1800000 milliseconds)
    setInterval(autoChangePage, 1800000);

    // Update current time every second
    setInterval(() => {
        document.getElementById('currentTime').textContent = new Date().toLocaleTimeString();
    }, 1000);
</script>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
}